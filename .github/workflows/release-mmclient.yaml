on:
  push:
    tags:
      - 'mmclient-v*.*.*'

name: Release mmclient
jobs:
  create_tarball_linux:
    name: Build mmclient (linux)
    runs-on: ubuntu-24.04
    steps:
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-unknown-linux-gnu

      - name: install deps
        run: |
          sudo apt install \
            nasm cmake protobuf-compiler libxkbcommon-dev libwayland-dev libasound2-dev \
            ffmpeg libavutil-dev libavformat-dev libavdevice-dev libavfilter-dev \
            libfontconfig-dev libfreetype-dev

      - name: install slang
        run: |
          mkdir $RUNNER_TEMP/slang
          slang_url=$( gh api https://api.github.com/repos/shader-slang/slang/releases |\
            jq -r '.[].assets[].browser_download_url' | grep linux-x86_64.tar.gz )
          (cd $RUNNER_TEMP/slang && curl -o - -fsSL "$slang_url" | tar zxv)
          echo "SLANG_DIR=$RUNNER_TEMP/slang" >> "$GITHUB_ENV"
          echo "LD_LIBRARY_PATH=$(dirname $(find $RUNNER_TEMP/slang -name libslang.*))" >> "$GITHUB_ENV"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/checkout@v4
      - uses: swatinem/rust-cache@v2
        with:
          workspaces: |
            mm-client
            mm-protocol

      - name: cargo build
        run: (cd mm-client && cargo build --bin mmclient --release --target x86_64-unknown-linux-gnu)
      - name: create release tarball
        run: |-
          mkdir "${RUNNER_TEMP}/${GITHUB_REF_NAME}"
          cp -r mm-client/target/x86_64-unknown-linux-gnu/release/mmclient README.md \
            "${RUNNER_TEMP}/${GITHUB_REF_NAME}"
          cp LICENSES/MIT.txt "${RUNNER_TEMP}/${GITHUB_REF_NAME}/LICENSE.txt"
          tar -C "${RUNNER_TEMP}" --numeric-owner -cvzf "${GITHUB_REF_NAME}-linux-amd64.tar.gz" "$GITHUB_REF_NAME"
      - name: upload tarball
        uses: actions/upload-artifact@v4
        with:
          name: mmclient-linux
          path: mmclient-*.tar.gz

  create_tarball_macos:
    name: Build mmclient (macos)
    runs-on: macos-latest
    steps:
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-apple-darwin

      - name: install deps
        run: |
          brew install ffmpeg@6 protobuf
          brew link ffmpeg@6

      - name: install slang
        run: |
          mkdir $RUNNER_TEMP/slang
          slang_url=$( gh api https://api.github.com/repos/shader-slang/slang/releases |\
            jq -r ".[].assets[].browser_download_url" | grep macos-aarch64.zip )
          curl -o "$RUNNER_TEMP/slang.zip" -fsSL "$slang_url"
          (cd "$RUNNER_TEMP/slang" && unzip "$RUNNER_TEMP/slang.zip")
          echo "SLANG_DIR=$RUNNER_TEMP/slang" >> "$GITHUB_ENV"
          echo "DYLD_LIBRARY_PATH=$(dirname $(find $RUNNER_TEMP/slang -name libslang.*))" >> "$GITHUB_ENV"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/checkout@v4
      - uses: swatinem/rust-cache@v2
        with:
          workspaces: |
            mm-client
            mm-protocol

      - name: cargo build
        run: (cd mm-client && cargo build --bin mmclient --release --features moltenvk_static --target aarch64-apple-darwin)
      - name: create release tarball
        run: |-
          mkdir "${RUNNER_TEMP}/${GITHUB_REF_NAME}"
          cp -r mm-client/target/aarch64-apple-darwin/release/mmclient README.md \
            "${RUNNER_TEMP}/${GITHUB_REF_NAME}"
          cp LICENSES/MIT.txt "${RUNNER_TEMP}/${GITHUB_REF_NAME}/LICENSE.txt"
          gtar -C "${RUNNER_TEMP}" --numeric-owner -cvzf "${GITHUB_REF_NAME}-darwin-arm64.tar.gz" "$GITHUB_REF_NAME"
      - name: upload tarball
        uses: actions/upload-artifact@v4
        with:
          name: mmclient-mac
          path: mmclient-*.tar.gz

  create_release:
    name: Create release
    needs: [create_tarball_linux, create_tarball_macos]
    runs-on: ubuntu-24.04
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - name: install git-cliff
        run: cargo install git-cliff
      - name: generate release notes
        run: |-
          echo "# Client version ${GITHUB_REF_NAME/mmclient-v/}" | tee -a release-notes.txt
          git cliff -c .github/workflows/cliff.toml \
            --include-path "mm-client/**/*" \
            --tag-pattern "client" \
            --tag "$GITHUB_REF_NAME" --latest | tail -n +2 | tee -a release-notes.txt


      - name: download artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true
      - name: create release
        uses: softprops/action-gh-release@v2
        with:
          body_path: release-notes.txt
          files: "mmclient-*.tar.gz"


